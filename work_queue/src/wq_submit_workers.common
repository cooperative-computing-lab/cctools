#!/bin/sh

script_name=$0
submit_dir=${USER}-workers
use_master_name=0
pwfile=""
arguments=""

host=
port=
count=1
nodes=1

cores=
memory=
disk=

gpuq=

forward=0
numworkers=1

show_help()
{
	# stub for user defined help options
	echo "" > /dev/null
}

show_help_common() 
{
	echo "Use: $script_name [worker options] [batch specific options] <servername> <port> <num-workers>"
	echo "         or"  
	echo "     $script_name [worker options] [batch specific options] --master-name <name> <num-workers>"

	echo "worker options:"

	echo "  -M,--master-name <name>  Name of the preferred master for worker."
	echo "  -N,--name <name>         Same as -M (backwards compatibility)."
	echo "  -C,--catalog <catalog>   Set catalog server to <catalog>. <catalog> format: HOSTNAME:PORT."
	echo "  -t,--timeout <time>      Abort after this amount of idle time. (default=900s)."
	echo "  -d,--debug <subsystem>   Enable debugging on worker for this subsystem (try -d all to start)."
	echo "  -w,--tcp-window-size <size>  Set TCP window size."
	echo "  -i,--min-backoff <time>  Set initial value for backoff interval when worker fails to connect to a master. (default=1s)"
	echo "  -b,--max-backoff <time>  Set maxmimum value for backoff interval when worker fails to connect to a master. (default=60s)"
	echo "  -z,--disk-threshold <size>   Set available disk space threshold (in MB). When exceeded worker will clean up and reconnect. (default=100MB)"
	echo "  -A,--arch <arch>         Set architecture string for the worker to report to master instead of the value in uname."
	echo "  -O,--os <os>             Set operating system string for the worker to report to master instead of the value in uname."
	echo "  -s,--workdir <path>      Set the location for creating the working directory of the worker."
	echo "  -P,--password <pwfile>   Password file to authenticate workers to master."
	echo "  -c, --cores <num>        Set the number of cores each worker should use (0=auto). (default=1)"
	echo "  --memory <size>          Manually set the amonut of memory (in MB) reported by this worker."
	echo "  --disk <size>            Manually set the amount of disk (in MB) reported by this worker."
	echo "  -n,--nodesperjob         (LPW) Set the number of nodes for each batch job (valid for Torque jobs)."
	echo "  -W,--workerspernode      (LPW) Set the number of workers for each node."
	echo "  -g,--gpuq                (LPW) Special flag to distinguish between cpu and gpu queues (e.g. on BW)"
	echo "  -f,--forward             (LPW) Enable SSH port forwarding."
	echo "  -h,--help                Show this help message."
	echo ""
	echo "batch specific options:"
	show_help
	exit 0
}

parse_arguments()
{
	echo "" > /dev/null
}

parse_arguments_common()
{

	# Used options (as in the getopts format):  M:N:C:t:d:w:i:b:z:A:O:s:r:P:h  
	while [ $# -gt 0 ]
	do
		case $1 in
			-a | --advertise)
			# Leave here for backwards compatibility
			arguments="$arguments -a"
			use_master_name=1
			;;
			-M | --master-name)
			shift
			arguments="$arguments -M $1"
			use_master_name=1
			;;
			-N | --name)
			shift
			arguments="$arguments -M $1"
			use_master_name=1
			;;
			-C | --catalog)  
			shift
			arguments="$arguments -C $1"
			;;
			-t | --timeout)  
			shift
			arguments="$arguments -t $1"
			;;
			-d | --debug)  
			shift
			arguments="$arguments -d $1"
			;;
			-w | --tcp-window-size)
			shift
			arguments="$arguments -w $1"
			;;
			-i | --min-backoff)
			shift
			arguments="$arguments -i $1"
			;;
			-b | --max-backoff)
			shift
			arguments="$arguments -b $1"
			;;
			-z | --disk-threshold)
			shift
			arguments="$arguments -z $1"
			;;
			-A | --arch)
			shift
			arguments="$arguments -A $1"
			;;
			-O | --os)  
			shift
			arguments="$arguments -O $1"
			;;
			-s | --workdir)  
			shift
			arguments="$arguments -s $1"
			;;
			-P | --password)  
			shift
			pwfile=$1 
			arguments="$arguments -P $pwfile"
			;;
			-c | --cores)
			shift
			cores="$1" # Lee-Ping autosets the number of cores later on.
			;; 
			--memory)  
			shift
			arguments="$arguments --memory $1"
			memory="$1"
			;;
			--disk)  
			shift
			arguments="$arguments --disk $1"
			disk="$1"
			;;
			-r)  
			shift
			requirements="$requirements $1"
			;;
			-n | --nodesperjob)  
			shift
			nodes="$1"
			;;
			-W | --workerspernode)  
			shift
			numworkers="$1"
			;;
			-f | --forward)
			forward=1
			;;
			-g | --gpuq)
			gpuq=1
			;; 
			-h | --help)
			show_help_common
			;;
			*)
			break
			;;
		esac
		shift
	done

	parse_arguments "$@"

	while [ $# -gt 0 ]
	do
		case $1 in
			-*)
			;;
			*)
			break
			;;
		esac
		shift
	done

	set_up_master_address $1 $2 $3 $4
}

set_up_master_address()
{
	if [ $use_master_name = 0 ]; then
		if [ $# -ne 3 ] ; then
			echo "3 arguments (<servername> <port> <num-workers>) are expected while $# are present: \"$@\"."
			echo "To view the help message, type: $script_name -h"
			exit 1
		fi
		host=$1
		port=$2
		count=$3
	else
		if [ $# -ne 1 ]
		then
			echo "1 argument (<num-workers>) is expected while $# is present: \"$@\"."
			echo "To view the help message, type: $script_name -h"
			exit 1
		fi
		host=
		port=
		count=$1
	fi
}

set_up_working_directory()
{
	# Set up a local temporary directory to manage the log files.
	# home directories on shared filesystems are often not accessible

	echo "Creating worker submit scripts in ${submit_dir}..."
	mkdir -p ${submit_dir}

	# Copy the worker executable into the temporary directory,
	# for similar reasons.

	worker=`which work_queue_worker 2>/dev/null`
	if [ $? != 0 ]
	then
		echo "$0: please add 'work_queue_worker' to your PATH."
		exit 1
	fi

	gpu_detection=`which cctools_gpu_autodetect 2>/dev/null`
	if [ $? != 0 ]
	then
		echo "$0: couldnot find cctools_gpu_autodetect in PATH. gpus will not be automatically detected."
	else
		cp $gpu_detection ${submit_dir}
	fi

	cd ${submit_dir}
	cp $worker .
}

set_up_password_file()
{
	# stub for password file code specific to batch system
	echo "" > /dev/null
}

set_up_password_file_common()
{
	# If a password file has been selected, check for existence,
	# copy it into the submission directory, then add it to
	# the transfer input files list.

	if [ X${pwfile} != X ]
	then
		if [ ! -f $pwfile ]
		then
			echo "$script_name password file $pwfile not found"
			exit 1
		fi

		cp $pwfile ${submit_dir}

		set_up_password_file
	fi
}

submit_workers_command()
{
	echo "Please define a submit_workers_command function in your script"
}

ssh_port_forward()
{
    if [[ $forward == 1 && ! $HOSTNAME =~ "h2o" ]]; then
        if [ `ps aux | grep $USER | grep ServerAlive | grep $port | grep -v grep | awk '{print \$2}' | wc -l` -eq 0 ] ; then
            echo "Establishing SSH connection to $host:$port and forwarding port to localhost:$port on $HOSTNAME"
            ssh -x -o ServerAliveInterval=180 -N -f -L$port:$host:$port $host
        fi
    fi
}

set_up_lpw_extras()
{
    #================================#
    #| Lee-Ping's Modifications for |#
    #| Best Performance on Clusters |#
    #|  using Torque: vsp-compute,  |#
    #|         icme, biox3          |#
    #================================#
    # Host-specific worker submission directory.
    if [[ x$WORK != x ]] ; then
        hometemp=$WORK/temp
    elif [[ $HOSTNAME =~ "hs-ln01" ]] ; then
        hometemp=/hsgs/nobackup/${USER}/temp
    else
        hometemp=$HOME/temp
    fi
    submit_dir=$hometemp/${USER}-workers/$$
    # Host-specific parameters to qsub.
    if [[ $HOSTNAME =~ "biox3" ]] ; then
        #---- BIOX3 ----#
        qsub_extras="#PBS -q MP
#PBS -V
#PBS -l walltime=72:00:00"
        self_ssh="y"
        scratch_dir=/tmp/$USER
        nodecores=16
    elif [[ $HOSTNAME =~ "vsp-compute" ]] ; then
        #---- VSP-COMPUTE ----#
        scratch_dir=/opt/scratch/$USER
        nodecores=12
    elif [[ $HOSTNAME =~ "h2o" || $HOSTNAME =~ "nid" ]] ; then
        qsub_extras="#PBS -l walltime=24:00:00
#PBS -l gres=ccm"
	if [[ x$gpuq != "x" ]] ; then
            node_extras=":xk"
	fi
        scratch_dir=/tmp/leeping/\$HOSTNAME/\$RANDOM
        nodecores=32
    elif [[ $HOSTNAME =~ "icme" ]] ; then
        #---- ICME GPU CLUSTER ----#
        scratch_dir=/home/$USER/scratch/\$HOSTNAME
        node_extras=":gpus=7"
        qsub_extras="#PBS -l walltime=440:00:00
#PBS -q rlongq"
        # Notes: node006 is slow and has a few broken GPUs
        # node012 was experiencing erratic and slow behavior (Feb 22, 2014)
        nodecores=12
    elif [[ $HOSTNAME =~ "hs-ln01" ]] ; then
        #---- PROCLUS (H&S) ----#
	# On Proclus it is advantageous to specify the 
        # number of cores per job because compute nodes 
        # are highly shared.
        nodecores=16
	if [ "x$cores" == "x" ] ; then cores=$(( $nodecores / $numworkers )) ; fi
        qsub_extras="#$ -l h_vmem=3.75G
#$ -l h_rt=672:00:00
#$ -pe shm $(( cores * numworkers ))"
        self_ssh="y"
        scratch_dir=/tmp/$USER/\$HOSTNAME
        headnode="hs-ln01" # Using $HOSTNAME for ssh does not work.
    elif [[ $TACC_SYSTEM == "stampede" ]] ; then
        #---- TACC STAMPEDE ----#
        scratch_dir=/tmp/$USER
	nodecores=12
	qsub_extras="#SBATCH -p gpu                # Queue name
#SBATCH -N 1                  # Total number of nodes requested
#SBATCH -n 1                  # Total number of mpi tasks requested
#SBATCH -t 24:00:00           # Run time (hh:mm:ss) - 1.5 hours
#SBATCH -A TG-MCB100057       # <-- Allocation name to charge job against"
    elif [[ $HOSTNAME =~ "sherlock" ]] ; then
        #---- SHERLOCK CAMPUS-WIDE CLUSTER ----#
	scratch_dir=/local-scratch/$USER
        headnode=${HOSTNAME%.stanford.edu}
	nodecores=16
        qsub_extras="#SBATCH -p normal             # Queue name
#SBATCH -t 48:00:00           # Run time (hh:mm:ss) - 1.5 hours"
    fi
    # Set the number of cores for the worker.
    if [ "x$cores" == "x" ] ; then cores=$(( $nodecores / $numworkers )) ; fi
    arguments="$arguments --cores $cores"
    if [[ x$headnode == x ]] ; then
        headnode=$HOSTNAME
    fi
    jobname="wq$port"
}

submit_workers()
{
	parse_arguments_common "$@"
        set_up_lpw_extras
	set_up_working_directory
	set_up_password_file_common
	ssh_port_forward
	submit_workers_command

	exit $?
}

