#!/bin/sh

uname -a

. ./configure.tools

save_arguments $0 $@

major=3
minor=2
micro=1

build_user=`whoami`
build_host=`uname -n`
build_sys=`uname -s | tr \[a-z\] \[A-Z\] | awk -F_ '{print $1}'`
build_cpu=`uname -m | tr \[a-z\] \[A-Z\]`

if [ "${build_cpu}" = unknown ]
then
	build_cpu=`uname -p | tr \[a-z\] \[A-Z\]`
fi

case "$build_cpu" in
	I[0-9]86)
	build_cpu=I386
	;;
	POWER\ MACINTOSH)
	build_cpu=POWERPC
	;;
	SUN4V)
	build_cpu=SPARC
	;;
esac

potential_packages="dttools sand allpairs wavefront makeflow ftp_lite s3tools chirp"

if [ -d parrot -a $build_sys = LINUX ]
then
	if [ $build_cpu = I386 -o $build_cpu = X86_64 ]
	then
		echo "including parrot, because this system is $build_sys and $build_cpu"
		potential_packages="${potential_packages} parrot"
	else
		echo "skipping parrot, because this cpu is ${build_cpu}, not I386"
	fi
else
	echo "skipping parrot, because this system is ${build_sys}, not LINUX"
fi

install_path="$HOME/cctools"

krb5_path="/usr"
readline_path="/usr"
globus_path="/usr"
fuse_path="/usr"
egee_path="/opt"
rfio_path="/usr"
dcap_path="/usr"
irods_path="/usr"
hdfs_path="/usr"
mysql_path="/usr"
python_path="/usr"

globus_flavor=auto
has_egee=no

ccompiler=gcc
cxxcompiler=g++
ccflags="-D__EXTENSIONS__ -D_LARGEFILE64_SOURCE -D__LARGE64_FILES -Wall -Werror -Wno-unknown-pragmas -Wno-deprecated-declarations -fno-exceptions"

if [ ${build_sys} != CYGWIN ]
then
	ccflags="${ccflags} -fPIC"
fi

config_readline_path=auto
config_globus_path=auto
config_fuse_path=auto
config_mysql_path=auto
config_python_path=auto

config_krb5_path=no
config_egee_path=no
config_rfio_path=no
config_dcap_path=no
config_irods_path=no
config_hdfs_path=no


if [ "X${GLOBUS_LOCATION}" != "X" ]
then
	globus_path=${GLOBUS_LOCATION}
fi

IFS=" ="
export IFS

while [ $# -gt 0 ]
do
	case $1 in
		--prefix)
			shift
			install_path=$1
			;;	
		--with-globus-path)
			shift
			globus_path=$1
			config_globus_path=yes
			;;
		--globus-flavor)
			shift
			globus_flavor=$1
			;;
		--with-krb5-path)
			shift
			krb5_path=$1
			config_krb5_path=yes
			;;
		--with-readline-path)
			shift
			readline_path=$1
			config_readline_path=yes
			;;
		--with-fuse-path)
			shift
			fuse_path=$1
			config_fuse_path=yes
			;;
		--with-egee-path)
			shift
			egee_path=$1
			config_egee_path=yes
			;;
		--with-rfio-path)
			shift
			rfio_path=$1
			config_rfio_path=yes
			;;
		--with-dcap-path)
			shift
			dcap_path=$1
			config_dcap_path=yes
			;;
		--with-irods-path)
			shift
			irods_path=$1
			config_irods_path=yes
			;;
		--with-hdfs-path)
			shift
			hdfs_path=$1
			config_hdfs_path=yes
			;;
		--with-mysql-path)
			shift
			mysql_path=$1
			config_mysql_path=yes
			;;
		--with-python-path)
			shift
			python_path=$1
			config_python_path=yes
			;;
		--with-*-path)
			echo "ignoring unknown package $1"
			shift
			;;
		-h | -help | --h | --help)
			cat <<EOF
Use: configure [options]
Where options are:
  --help
  --prefix             <path>
  --globus-flavor      <flavor>
  --with-PACKAGE-path  <path>

Where PACKAGE may be:
    readline
    egee
    krb5
    fuse
    rfio
    dcap
    globus
    irods
    hdfs
    mysql
    python
EOF
			exit 1
			;;
		*)
			echo "Unknown argument $1"
			exit 1
			;;
	esac
	shift
done

IFS=" "
export IFS

if [ $build_sys = LINUX ]
then
	ldflags="-Xlinker -Bstatic -Xlinker -lstdc++ -static-libgcc -Xlinker -Bdynamic -Xlinker --as-needed "
else
	ldflags="-lstdc++ -static-libgcc"
fi

rm -f Makefile.config
echo "checking for all the things I know how to build..."
for p in $potential_packages
do
	if [ -d $p ]
	then
		echo "package $p found"
		packages="${packages} $p"
		if [ -d `pwd`/$p/src ]
		then
			internal_ccflags="${internal_ccflags} -I`pwd`/$p/src"
			internal_ldflags="${internal_ldflags} -L`pwd`/$p/src"
		fi
	else
		echo "package $p not found (that's ok)"
	fi
done

require_path ${ccompiler}
require_path ${cxxcompiler}
require_path "install"
require_gnu_make

##########################################################################
# SWITCH TO STATIC LINKING FOR UNCOMMON THIRD-PARTY PACKAGES
##########################################################################
library_search_mode=prefer_static
##########################################################################

if [ $config_egee_path != no ] && check_file "${egee_path}/lcg/include/lcg_util.h"
then
	has_egee=yes
	globus_flavor=gcc32dbgpthr
	fix_globus_install ${egee_path}/globus ${globus_flavor}
	ccflags="${ccflags} -I${egee_path}/globus/include/${globus_flavor} -I${egee_path}/lcg/include -I${egee_path}/edg/include  -I${egee_path}/lcg/include/lfc -I${egee_path}/lcg/include/dpm -DHAS_EGEE -DHAS_GLOBUS_GSS"
	ldflags="${ldflags} -L${egee_path}/globus/lib -L${egee_path}/edg/lib -L${egee_path}/lcg/lib -ldpm -llfc -lgfal -llcg_util -lcgsi_plugin_gsoap_2.6 -lglobus_gss_assist_${globus_flavor} -lglobus_gssapi_gsi_${globus_flavor} -lglobus_gsi_proxy_core_${globus_flavor} -lglobus_gsi_credential_${globus_flavor} -lglobus_gsi_callback_${globus_flavor} -lglobus_oldgaa_${globus_flavor} -lglobus_gsi_sysconfig_${globus_flavor} -lglobus_gsi_cert_utils_${globus_flavor} -lglobus_openssl_${globus_flavor} -lglobus_proxy_ssl_${globus_flavor} -lglobus_openssl_error_${globus_flavor} -lglobus_common_${globus_flavor} -lldap_${globus_flavor} -llber_${globus_flavor} -lsasl -lssl_${globus_flavor} -lcrypto_${globus_flavor} -lltdl_${globus_flavor} -llutil_${globus_flavor} -luuid"
else
	has_egee=no
	if [ $config_egee_path = yes ]
	then
		echo "*** Sorry, I couldn't find EGEE in $egee_path"
		echo "*** Check --with-egee-path and try again."
		exit 1
	else
		echo "*** skipping egee support"
	fi
fi

if [ $has_egee = yes ]
then
	echo "using egee version of rfio"
else
	if [ $config_rfio_path != no ] && library_search shift ${rfio_path}
	then
		ccflags="${ccflags} -I${rfio_path}/include -DHAS_RFIO"
	else
		if [ $config_rfio_path = yes ]
		then
			  echo "*** Sorry, I couldn't find RFIO in $rfio_path"
			  echo "*** Check --with-rfio-path and try again."
			  exit 1
		else
			  echo "*** skipping rfio support"
		fi
	fi
fi

if [ $config_dcap_path != no ] && library_search dcap ${dcap_path}
then
	ccflags="${ccflags} -I${dcap_path}/dcap -DHAS_DCAP"
else
	if [ $config_dcap_path = yes ]
	then
		echo "*** Sorry, I couldn't find dcap in ${dcap_path}"
		echo "*** Check --with-dcap-path and try again."
		exit 1
	else
		echo "*** skipping dcap support"
	fi
fi

if [ $has_egee = yes ]
then	
	echo "using egee version of globus"
else
	if [ x$globus_flavor = xauto ]
	then
		if [ $build_cpu = X86_64 ] 
		then
			globus_flavor=gcc64
		else
			globus_flavor=gcc32
		fi
	fi

	echo "using a globus flavor of '$globus_flavor' (if this is wrong, use the --globus-flavor argument)"

	if [ $config_globus_path != no ]
	then
		if check_file ${globus_path}/include/${globus_flavor}/globus_common.h
		then
			ccflags="${ccflags} -I${globus_path}/include/${globus_flavor} -DHAS_GLOBUS_GSS"
			ldflags="${ldflags} -L${globus_path}/lib"
			for library in globus_gss_assist globus_gssapi_gsi globus_gsi_proxy_core globus_gsi_credential globus_gsi_callback globus_oldgaa globus_gsi_sysconfig globus_gsi_cert_utils globus_openssl globus_openssl_error globus_callout globus_proxy_ssl globus_common ltdl
			do
				library_search ${library}_${globus_flavor} ${globus_path}
			done

			cctools_dynamic_auth_libs="${cctools_dynamic_auth_libs} -L${globus_path}/lib -lglobus_gss_assist_${globus_flavor}"

		elif check_file ${globus_path}/include/globus/globus_common.h
		then
			ccflags="${ccflags} -I${globus_path}/lib/globus/include -I${globus_path}/include/globus -DHAS_GLOBUS_GSS"
			ldflags="${ldflags} -L${globus_path}/lib"
			for library in globus_gss_assist globus_gssapi_gsi globus_gsi_proxy_core globus_gsi_credential globus_gsi_callback globus_oldgaa globus_gsi_sysconfig globus_gsi_cert_utils globus_openssl globus_openssl_error globus_callout globus_proxy_ssl globus_common ltdl
			do
				library_search $library ${globus_path}
			done

                        cctools_dynamic_auth_libs="${cctools_dynamic_auth_libs} -L${globus_path}/lib -lglobus_gss_assist"

		else
			if [ $config_globus_path = yes ]
			then
				echo "*** Sorry, I couldn't find Globus in $globus_path"
				echo "*** Check --with-globus-path and try again."
				exit 1
			else
				echo "*** skipping globus support"
			fi
		fi
	else
		echo "*** skipping globus support"
	fi
fi

if [ $config_irods_path != no ] && library_search RodsAPIs "${irods_path}" core/obj
then
	ccflags="${ccflags} -I${irods_path}/lib/core/include -I${irods_path}/lib/api/include -I${irods_path}/lib/md5/include -I${irods_path}/server/core/include -I${irods_path}/server/api/include -I${irods_path}/server/icat/include -I${irods_path}/server/drivers/include -I${irods_path}/server/re/include -DHAS_IRODS"
else
	if [ $config_irods_path = yes ]
	then
		echo "*** Sorry, I couldn't find IRODS in $irods_path"
		echo "*** Check --with-irods-path and try again."
		exit 1
	else
		echo "*** skipping irods support"
	fi
fi

# Create a blank file so Make does not fail if HDFS is not enabled.
touch hdfs-setup.template
if [ $config_hdfs_path != no ] && check_file "${hdfs_path}/src/c++/libhdfs/hdfs.h"
then
	if [ X$JAVA_HOME = X ]
	then
		echo "*** Please set JAVA_HOME to the Java installation that you use with Hadoop."
		exit 1
	fi

	# Make a HDFS Environment Setup Script Template
	# Automatically sets JAVA_HOME and HADOOP_HOME for the user if absent.
	HDFS_TEMPLATE='#!/bin/sh

if [ -z "$JAVA_HOME" ]; then
  JAVA_HOME="'"$JAVA_HOME"'"
fi
export JAVA_HOME

if [ -z "$HADOOP_HOME" ]; then
  HADOOP_HOME="'"$hdfs_path"'"
fi
export HADOOP_HOME

if [ -z $CLASSPATH ]; then
  CLASSPATH=${JAVA_HOME}/jdk/jre/lib
else
  CLASSPATH=${CLASSPATH}:${JAVA_HOME}/jdk/jre/lib
fi
CLASSPATH=${CLASSPATH}:`ls ${HADOOP_HOME}/hadoop-*-core.jar | head -n 1`
CLASSPATH=${CLASSPATH}:${HADOOP_HOME}/conf
for f in ${HADOOP_HOME}/lib/*.jar; do
  CLASSPATH=${CLASSPATH}:$f
done
export CLASSPATH

if [ -z $LIBJVM_PATH ]; then
  LIBJVM_PATH=`find $JAVA_HOME -follow -name libjvm.so | head -1l`
  if [ -z $LIBJVM_PATH ]; then
    echo 2>&1 "Sorry but could not find libjvm.so anywhere under JAVA_HOME"
    exit 1
  fi
fi
export LIBJVM_PATH

if [ -z $LIBHDFS_PATH ]; then
  if [ `uname -m` = x86_64 ]; then
    LIBHDFS_PATH="$HADOOP_HOME/c++/`uname`-amd64-64/lib/libhdfs.so"
  else
    LIBHDFS_PATH="$HADOOP_HOME/c++/`uname`-i386-32/lib/libhdfs.so"
  fi
  if [ ! -e $LIBHDFS_PATH ]; then
    echo 2>&1 "Sorry but could not find libhdfs.so anywhere under HADOOP_HOME"
    exit 1
  fi
fi
export LIBHDFS_PATH

'
	echo -n "$HDFS_TEMPLATE" > hdfs-setup.template
	ccflags="${ccflags} -I ${hdfs_path}/src/c++/libhdfs -DHAS_HDFS"
	ccflags="${ccflags} -I ${JAVA_HOME}/include -I ${JAVA_HOME}/include/`echo $build_sys | tr \[A-Z\] \[a-z\]`"
else
	if [ $config_hdfs_path = yes ]
	then
		echo "*** Sorry, I couldn't find HDFS in $hdfs_path"
		echo "*** Check --with-hdfs-path and try again."
		exit 1
	else
		echo "*** skipping hdfs support"
	fi
fi

if [ $config_mysql_path != no ] && library_search mysqlclient ${mysql_path} mysql
then
	if [ ${mysql_path} != /usr ]
	then
		ccflags="${ccflags} -I${mysql_path}/include"
	fi

	ccflags="${ccflags} -DHAS_MYSQL -DHAS_BXGRID"
else
	if [ $config_mysql_path = yes ]
	then
		echo "*** Sorry, I couldn't find MySQL in $mysql_path"
		echo "*** Check --with-mysql-path and try again."
		exit 1
	else
		echo "*** skipping mysql support"
	fi
fi

##########################################################################
# SWITCH BACK TO DYNAMIC LINKING FOR COMMON SYSTEM LIBRARIES
##########################################################################
library_search_mode=prefer_dynamic
##########################################################################

if [ $config_readline_path != no ] && library_search readline ${readline_path}
then
	if [ ${readline_path} != /usr ]
	then
		ccflags="${ccflags} -I${readline_path}/include"
	fi
	
	ccflags="${ccflags} -DHAS_LIBREADLINE"

	# We rely on the --as-needed flag to figure out what dynamic
	# libraries are actually used by each executable.
	# However, libreadline doesn't properly specify a dependency
	# on ncurses and history, so we must force them to link.

	if [ $build_sys = LINUX ]
	then
		cctools_readline_ldflags="-Xlinker --no-as-needed -lncurses -lhistory -Xlinker --as-needed"
	else
		library_search ncurses ${readline_path}
		library_search history ${readline_path}
	fi
else
	echo "*** skipping readline..."
fi

if [ $config_fuse_path != no ]
then
        if library_search fuse ${fuse_path} || library_search fuse /
        then
                if [ x${fuse_path} != x/ -a x${fuse_path} != x/usr ]
                then
                        ccflags="${ccflags} -I${fuse_path}/include"
                fi
                ccflags="${ccflags} -DHAS_FUSE"
        else
                if [ $config_fuse_path = yes ]
                then

        		echo "*** Sorry, I couldn't find Fuse in $fuse_path"
        		echo "*** Check --with-fuse-path and try again."
        		exit 1
                else
                        echo "*** skipping fuse support"
                fi
        fi
else
	echo "*** skipping fuse support"
fi

# Solaris places kerberos includes in a strange place.

if [ -d ${krb5_path}/include/kerberosv5 ]
then
	krb5_include_path=${krb5_path}/include/kerberosv5
else
	krb5_include_path=${krb5_path}/include
fi

if [ $config_krb5_path != no ] && check_file ${krb5_include_path}/krb5.h && library_search krb5 "${krb5_path}"
then
	if [ ${krb5_include_path} != /usr/include ]
	then
		ccflags="${ccflags} -I${krb5_include_path}"
	fi

	cctools_dynamic_auth_libs="${cctools_dynamic_auth_libs} -L${krb5_path}/lib -lkrb5"

	ccflags="${ccflags} -DHAS_KRB5"
else
	if [ $config_krb5_path = yes ]
	then
		echo "*** Sorry, I couldn't find Kerberos in $krb5_path"
		echo "*** Check --with-krb5-path and try again."
		exit 1
	else
		echo "*** skipping krb5 support"
	fi
fi

if [ $config_python_path != no ]
then
    if check_file ${python_path}/bin/python2
    then
	python=${python_path}/bin/python2
    elif check_file ${python_path}/bin/python
    then
	python=${python_path}/bin/python
    else
    	python=0
	if [ $config_python_path = yes ]
	then
	    echo "*** Sorry, I couldn't find Python in $python_path"
	    echo "*** Check --with-python-path and try again."
	    exit 1
	else
	    echo "*** skipping python support"
	fi
    fi

    if [ $python != 0 ]
    then
	python_version="$(${python} -V 2>&1)"
	if [ `echo ${python_version} | awk '{print $2}' | cut -d . -f 2` -lt 6 ]
	then
	    echo "*** Sorry, you have ${python_version}, we require Python >= 2.6.x"
	else
	    packages="${packages} python"
	fi
    fi
fi

linker="gcc"

library_search ssl	/usr
library_search crypto	/usr
library_search resolv   /usr
library_search socket   /usr
library_search nsl      /usr

# Finally, add in standard system libraries found everywhere

if [ $build_sys != DARWIN ]
then
	ldflags="${ldflags} -lrt"
fi

ldflags="${ldflags} -ldl -lpthread -lz -lc -lm"

if [ $build_sys = DARWIN ]
then
	cctools_dynamic_suffix=dylib
	cctools_dynamic_flag=-dynamiclib
else
	cctools_dynamic_suffix=so
	cctools_dynamic_flag=-shared
fi

optional_function strsignal /usr/include/string.h HAS_STRSIGNAL
optional_function pread /usr/include/unistd.h HAS_PREAD
optional_function pwrite /usr/include/unistd.h HAS_PWRITE

optional_file /usr/include/sys/statfs.h HAS_SYS_STATFS_H
optional_file /usr/include/sys/statvfs.h HAS_SYS_STATVFS_H
optional_file /usr/include/alloca.h HAS_ALLOCA_H

if check_path doxygen
then
    doxygen=doxygen
else
    doxygen=true
fi
	
ccflags="${ccflags} -DINSTALL_PATH=\\\"${install_path}\\\" -g -D_REENTRANT -D_GNU_SOURCE -DBUILD_USER=\\\"$build_user\\\" -DBUILD_HOST=\\\"$build_host\\\" -DCCTOOLS_VERSION_MAJOR=$major -DCCTOOLS_VERSION_MINOR=$minor -DCCTOOLS_VERSION_MICRO=$micro -DCCTOOLS_OPSYS_${build_sys} -DCCTOOLS_CPU_${build_cpu}"

echo "Creating Makefile.config..."

cat <<EOF >>Makefile.config
# Generated at `date` by `whoami`@`uname -n`

CCTOOLS_INSTALL_DIR=${install_path}
CCTOOLS_PACKAGES=${packages}

CCTOOLS_CC=@echo COMPILE \$@; ${ccompiler}
CCTOOLS_BASE_CCFLAGS=${ccflags}
CCTOOLS_INTERNAL_CCFLAGS=${internal_ccflags} \${CCTOOLS_BASE_CCFLAGS}
CCTOOLS_CCFLAGS=-I\${CCTOOLS_INSTALL_DIR}/include/cctools \${CCTOOLS_BASE_CCFLAGS}

CCTOOLS_CXX=@echo COMPILE \$@; ${cxxcompiler}
CCTOOLS_BASE_CXXFLAGS=${ccflags}
CCTOOLS_INTERNAL_CXXFLAGS=${internal_ccflags} \${CCTOOLS_BASE_CXXFLAGS}
CCTOOLS_CXXFLAGS=-I\${CCTOOLS_INSTALL_DIR}/include/cctools \${CCTOOLS_BASE_CXXFLAGS}

CCTOOLS_LD=@echo LINK \$@; ${linker}
CCTOOLS_BASE_LDFLAGS=${ldflags}
CCTOOLS_INTERNAL_LDFLAGS= ${internal_ldflags} \${CCTOOLS_BASE_LDFLAGS}
CCTOOLS_LDFLAGS=-L\${CCTOOLS_INSTALL_DIR}/lib \${CCTOOLS_BASE_LDFLAGS}

CCTOOLS_READLINE_LDFLAGS=${cctools_readline_ldflags}

CCTOOLS_DYNAMIC_SUFFIX=${cctools_dynamic_suffix}
CCTOOLS_DYNAMIC_FLAG=${cctools_dynamic_flag}
CCTOOLS_DYNAMIC_AUTH_LIBS=${cctools_dynamic_auth_libs}

CC=\$(CCTOOLS_CC)
CCFLAGS=\$(CCTOOLS_CCFLAGS)
LD=\$(CCTOOLS_LD)
LDFLAGS=\$(CCTOOLS_LDFLAGS)
CXX=\$(CCTOOLS_CXX)
CXXFLAGS=\$(CCTOOLS_CXXFLAGS)

CCTOOLS_AR=ar
CCTOOLS_YACC=bison
CCTOOLS_LEX=flex
CCTOOLS_DOXYGEN=${doxygen}

CCTOOLS_PYTHON=${python}
EOF

echo ""
echo "To re-configure, type './configure.rerun'"
echo "To build, type '${MAKE}'"
echo "To install, type '${MAKE} install'"
echo ""

exit 0
