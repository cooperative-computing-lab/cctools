#! /usr/bin/env python

# Copyright (C) 2023- The University of Notre Dame
# This software is distributed under the GNU General Public License.
# See the file COPYING for details.

# transactions log format:
# time manager_pid MANAGER manager_pid START|END
# time manager_pid WORKER worker_id CONNECTION host:port
# time manager_pid WORKER worker_id DISCONNECTION (UNKNOWN|IDLE_OUT|FAST_ABORT|FAILURE|STATUS_WORKER|EXPLICIT)
# time manager_pid WORKER worker_id RESOURCES {resources}
# time manager_pid WORKER worker_id CACHE_UPDATE filename size_in_mb wall_time_us start_time_us
# time manager_pid WORKER worker_id TRANSFER (INPUT|OUTPUT) filename size_in_mb wall_time_us start_time_us
# time manager_pid CATEGORY name MAX {resources_max_per_task}
# time manager_pid CATEGORY name MIN {resources_min_per_task_per_worker}
# time manager_pid CATEGORY name FIRST (FIXED|MAX|MIN_WASTE|MAX_THROUGHPUT) {resources_requested}
# time manager_pid TASK task_id WAITING category_name (FIRST_RESOURCES|MAX_RESOURCES) attempt_number {resources_requested}\n");
# time manager_pid TASK task_id RUNNING worker_id (FIRST_RESOURCES|MAX_RESOURCES) {resources_allocated}
# time manager_pid TASK task_id WAITING_RETRIEVAL worker_id
# time manager_pid TASK task_id (RETRIEVED|DONE) (SUCCESS|SIGNAL|END_TIME|FORSAKEN|MAX_RETRIES|MAX_WALLTIME|UNKNOWN|RESOURCE_EXHAUSTION) exit_code {limits_exceeded} {resources_measured}
# time manager_pid DUTY task_id (WAITING|SENT|STARTED|FAILURE) worker_id


from collections import defaultdict
from pathlib import Path
import argparse
import datetime
import heapq
import json
import math
import matplotlib as mpl
import matplotlib.pyplot as plt
import matplotlib.pyplot as plticker
import pandas as pd
import sys
from functools import partial

resources_names = "cores memory disk gpus".split()
task_report_abs = "time_worker_start time_worker_end time_commit_start time_commit_end".split()
task_report_all = "time_input_mgr time_output_mgr size_input_mgr size_output_mgr".split() + task_report_abs


class Manager:
    def __init__(self, manager_pid, origin):
        self.origin = origin
        self.termination = 0  # yet unknown

        self.pid = manager_pid

        # [task_id][attempt_number] -> attempt_info
        self.tasks_attempts = defaultdict( lambda: defaultdict( lambda: defaultdict( lambda: pd.NA )))

        # [task_id] -> attempt_number
        self.task_last_attempt = {}

        # [(worker_id,hostport)] -> worker_info
        self.worker_lifetime = defaultdict(lambda: defaultdict( lambda: pd.NA ))

        # [(worker_id,hostport)] -> transfer
        self.worker_transfers = defaultdict(lambda: [])

        # [worker_id] -> available slots (heapq)
        self.worker_free_slots = {}

        # [worker_id][slot] -> (task_id,attempt_number)
        self.worker_used_slots = defaultdict(lambda: {})

        # [worker_id] -> hostport
        self.last_host_port = {}

        self.tasks = None
        self.workers = None
        self.transfers = None

    def write_tables(self, filename, index):
        name = Path(filename).stem
        tables = ["tasks", "workers", "transfers"]
        for (table, df) in zip(tables, [self.tasks, self.workers, self.transfers]):
            df.to_csv(f"{name}_{index}_{table}.csv", index=False)

    def make_tables(self):
        self.tasks = self.make_table_tasks()
        self.workers = self.make_table_workers()
        self.transfers = self.make_table_transfers()

    def make_table_tasks(self):
        all_tasks = []
        keys = None
        for attempts in self.tasks_attempts.values():
            for attempt in attempts.values():
                if not keys:
                    keys = attempt.keys()
                all_tasks.append([ attempt[k] for k in keys ])
        tasks_df = pd.DataFrame(all_tasks, columns=keys)
        tasks_df["measured_wall_time"] = tasks_df["time_worker_end"] - tasks_df["time_worker_start"]
        return tasks_df

    def make_table_workers(self):
        all_workers = []
        keys = None
        for worker in self.worker_lifetime.values():
            if not keys:
                keys = worker.keys()
            all_workers.append([ worker[k] for k in keys ])
        workers_df = pd.DataFrame(all_workers, columns=keys)

        # fill up disconnect times for workers that survive the manager
        workers_df[workers_df["DISCONNECTION"].isna()]["DISCONNECTION"] = self.termination
        return workers_df

    def make_table_transfers(self):
        all_transfers = []
        keys = "worker_id hostport time direction filetype filename size wall_time start_time".split()
        for per_worker in self.worker_transfers.values():
            all_transfers.extend(per_worker)
        transfers_df = pd.DataFrame(all_transfers, columns=keys)
        return transfers_df


class ParseTxn:
    def __init__(self, logfile, tasks_range_spec=None):
        self._log = logfile
        self.managers = {}
        self.cm = None  # current manager

        self.tasks_range = self.expand_range(tasks_range_spec)

        self._parse()

    def expand_range(self, tasks_range_spec):
        start, end, step = 1, None, 1

        if tasks_range_spec:
            rest = tasks_range_spec.split(",")
            (start, *rest) = rest
            start = max(1, int(start)) if start else 1
            if rest:
                (end, *step) = rest
                end = max(start+1, int(end)) if end else None
                step = max(1, int(step[0])) if step else 1
        return (start,end,step)

    def check_task_range(self, task_id):
        (start, end, step) = self.tasks_range
        if start and task_id < start:
            return False
        if end and task_id >= end:
            return False
        return 0 == (task_id + start) % step

    def write_tables(self, filename):
        for (i, m) in enumerate(self.managers.values()):
            m.write_tables(filename, i)

    def _next_line(self):
        with open(self._log) as l:
            for line in l:
                try:
                    if line.startswith("#"):
                        continue
                    (time, manager_pid, subject, target, event, *arg) = line.split(maxsplit=5)
                    try:
                        arg = arg[0].strip()
                    except IndexError:
                        arg = None
                except ValueError:
                    continue

                time = float(time)/1000000
                if self.cm and self.cm.pid == manager_pid:
                    time -= self.cm.origin

                yield (time, manager_pid, subject, target, event, arg)

    def arg_to_xfer(self, worker_id, hostport, time, direction, arg):
        filename, size, wall_time, start_time = arg.split()
        size = float(size)/1e6
        wall_time = float(wall_time)/1e6
        start_time = float(start_time)/1e6

        if start_time < self.cm.origin:
            # guard for cases when start time was unknown 
            start_time = time - wall_time
        else:
            start_time -= self.cm.origin

        try:
            (filetype, rest) = filename.split("-", maxsplit=1)
        except:
            filetype = "file"

        return [worker_id, hostport, time, direction, filetype, filename, size, wall_time, start_time]

    def arg_to_values(self, ca, prefix, names, arg):
        # values of the form [value, "units"]
        def value(res):
            if not res:
                return pd.NA
            n = float(res[0])
            if math.isnan(n) or n < 0: 
                return pd.NA
            else:
                return n
        from_json = json.loads(arg)
        for r in names:
            v = value(from_json.get(r, None))
            ca[f"{prefix}{r}"] = v

    def arg_to_resources(self, ca, prefix, arg):
        self.arg_to_values(ca, prefix, resources_names, arg)

    def arg_to_task_report(self, ca, arg):
        self.arg_to_values(ca, "", task_report_all, arg)
        for r in task_report_abs:
            ca[f"{r}"] -= self.cm.origin


    def _parse_manager(self, time, manager_pid, event):
        if event == "START":
            self.cm = Manager(manager_pid, time)
            self.managers[manager_pid] = self.cm
        elif event == "END":
            self.cm.make_tables()
            self.cm = None

    def _next_slot(self, worker_id):
        free = self.cm.worker_free_slots[worker_id]
        if not free:
            heapq.heappush(free, len(self.cm.worker_used_slots[worker_id]) + 1)
        return heapq.heappop(free)

    def _parse_worker(self, time, manager_pid, worker_id, event, arg):
        if not worker_id.startswith("worker-"):
            return

        if event == "CONNECTION":
            hostport = arg
            self.cm.last_host_port[worker_id] = hostport
            self.cm.worker_lifetime[(worker_id,hostport)]["worker_id"] = worker_id
            self.cm.worker_lifetime[(worker_id,hostport)]["hostport"] = hostport
            self.cm.worker_lifetime[(worker_id,hostport)][event] = time
            self.cm.worker_lifetime[(worker_id,hostport)]["DISCONNECTION"] = pd.NA
            self.cm.worker_free_slots[worker_id] = []
        elif event == "DISCONNECTION":
            reason = arg
            hostport = self.cm.last_host_port[worker_id]
            self.cm.worker_lifetime[(worker_id,hostport)][event] = time
            self.cm.worker_lifetime[(worker_id,hostport)]["reason"] = reason
            for (slot, (task_id, attempt_number)) in self.cm.worker_used_slots[worker_id].items():
                self.cm.tasks_attempts[task_id][attempt_number]["reason"] = "DISCONNECTION"
                self.cm.tasks_attempts[task_id][attempt_number]["DISCONNECTION"] = time
                self.cm.tasks_attempts[task_id][attempt_number]["last_state"] = "DISCONNECTION"
                self.cm.tasks_attempts[task_id][attempt_number]["last_state_time"] = time
                heapq.heappush(self.cm.worker_free_slots[worker_id], slot)
        elif event == "RESOURCES":
            hostport = self.cm.last_host_port[worker_id]
            self.arg_to_resources(self.cm.worker_lifetime[(worker_id,hostport)], "", arg)
        elif event == "CACHE_UPDATE":
            hostport = self.cm.last_host_port[worker_id]
            xfer = self.arg_to_xfer(worker_id, hostport, time, event, arg)
            self.cm.worker_transfers[(worker_id,hostport)].append(xfer)
        elif event == "TRANSFER":
            hostport = self.cm.last_host_port[worker_id]
            (direction, arg) = arg.split(maxsplit=1)
            xfer = self.arg_to_xfer(worker_id, hostport, time, direction, arg)
            self.cm.worker_transfers[(worker_id,hostport)].append(xfer)

    def _parse_category(self, time, manager_pid, category, event, arg):
        if event == "MAX":
            pass
        elif event == "MIN":
            pass
        elif event == "FIRST":
            (mode, arg) = arg.split(maxsplit=1)
            pass

    def _parse_duty(self, time, manager_pid, task_id, event, arg):
        la = self.cm.task_last_attempt[task_id]
        ca = self.cm.tasks_attempts[task_id][la]

        if event == "WAITING":
            pass
        elif event == "SENT":
            pass
        elif event == "STARTED":
            ca["duty"] = time
        elif event == "FAILURE":
            pass

    def _parse_task(self, time, manager_pid, task_id, event, arg):
        task_id = int(task_id)

        if not self.check_task_range(task_id):
            return

        if event == "WAITING":
            (category, allocation, attempt_number, arg) = arg.split()
            self.cm.task_last_attempt[task_id] = attempt_number

        la = self.cm.task_last_attempt[task_id]
        ca = self.cm.tasks_attempts[task_id][la]

        ca[event] = time
        ca["last_state"] = event
        ca["last_state_time"] = time

        if event == "WAITING":
            ca["task_id"] = task_id
            ca["attempt_number"] = attempt_number
            ca["category"] = category
            self.arg_to_resources(ca, "requested_", arg)
            ca["duty"] = pd.NA   # we do not know if it a duty
        elif event == "RUNNING":
            (worker_id, allocation, arg) = arg.split()
            slot = self._next_slot(worker_id)
            ca["worker_id"] = worker_id
            ca["slot"] = slot
            self.cm.worker_used_slots[worker_id][slot] = (task_id, la)
            self.arg_to_resources(ca, "allocated_", arg)
            ca["DISCONNECTION"] = pd.NA  # add field to keep time in case of worker disconnection
        elif event == "WAITING_RETRIEVAL":
            pass
        elif event == "RETRIEVED":
            (reason, exit_code, l, m) = arg.split()
            ca["reason"] = reason
            ca["exit_code"] = int(exit_code)
            self.arg_to_task_report(ca, m)
            self.arg_to_resources(ca, "measured_", m)
            slot = ca["slot"]
            del self.cm.worker_used_slots[ca["worker_id"]][slot]
            heapq.heappush(self.cm.worker_free_slots[ca["worker_id"]], slot)
        elif event == "DONE":
            pass

    def _parse(self):
        for (time, manager_pid, subject, target, event, arg) in self._next_line():
            if self.cm and self.cm.pid == manager_pid:
                # set each last time know to the termination time of the manager
                self.cm.termination = time 

            if subject == "MANAGER":
                self._parse_manager(time, manager_pid, event)
            elif subject == "WORKER":
                self._parse_worker(time, manager_pid, target, event, arg)
            elif subject == "CATEGORY":
                self._parse_category(time, manager_pid, target, event, arg)
            elif subject == "DUTY":
                self._parse_duty(time, manager_pid, target, event, arg)
            elif subject == "TASK":
                self._parse_task(time, manager_pid, target, event, arg)

class TxnPlot:
    def __init__(self, managers, opts):
        self.managers = managers
        self.opts = opts

        plt.style.use('tableau-colorblind10')
        if opts.tex:
            font = {'family' : 'serif',
                    'serif': ['Computer Modern Roman'],
                    'weight' : 'normal',
                    'size'   : 11}
            plt.rc('font', **font)
            plt.rc('text', usetex=True)

        height = opts.height if opts.height else opts.width * (2/3)


        self.fig = plt.figure(constrained_layout=True, figsize=(opts.width, height), dpi=opts.dpi)
        self.subs = self.fig.subplots(nrows=1, ncols=len(managers), squeeze=False)

        # default legend
        self.legend = {
                "workers lifetime": 'C9',
                "tasks executing": 'C0',
                "tasks waiting for cache": 'C7',
                "tasks lost on disconnection": 'C8',
                "tasks waiting retrieval": 'C2',
                "tasks failures": 'red',
                "cache updates": 'C1',
                "inputs from manager": 'C3',
                "outputs to manager": 'C5',
                }
        self.display_plot()

    def determine_origin(self, m):
        spec = self.opts.origin
        if spec == "manager-start":
            return 0
        elif spec == "first-waiting-task":
            return m.tasks["WAITING"].min()
        elif spec == "first-transfer":
            return m.transfers["time"].min()
        elif spec == "first-worker":
            return m.workers["CONNECTION"].min()
        return 0

    def determine_end(self, m):
        spec = self.opts.end
        if spec == "manager-end":
            return m.termination
        elif spec == "last-task":
            return m.tasks["last_state_time"].max()
        return m.termination

    def make_tick_time(self, origin, x, pos):
        def roundb(b, x):
            return b * math.ceil(x/b)

        # round seconds to multiples of 5
        t = roundb(5, x - origin)
        u = "s"
        if t > 900:
            # round minutes to multiples of 5
            t = roundb(5, t/60)
            u = "m"
        elif t > 3600 * 24:
            t = roundb(1, t/(3600 * 24))
            u = "h"
        return "{:.0f}{}".format(t, u)

    def bh(self, fig, slots, left, width, color, **kwargs):
        # bar plot with some defaults
        args = { "left": left, "width": width, "color": color, "linewidth": 0.5, "align": "edge", "edgecolor": "#00000010" }
        args.update(kwargs)
        if not args["edgecolor"]:
            args["edgecolor"] = color
        fig.barh(slots, **args)

    def display_plot(self):
        plt.title(self.opts.title)

        for (i, m) in enumerate(self.managers.values()):
            s = self.subs[0, i]

            self.plot(s, m)

            plot_origin = self.determine_origin(m)
            plot_end = self.determine_end(m)

            s.axis(xmin=plot_origin, xmax=plot_end)
            s.set_xticks([plot_origin, plot_end])
            s.xaxis.set_major_formatter(plticker.FuncFormatter(partial(self.make_tick_time, plot_origin)))
            s.set_xlabel("time")

            s.tick_params(axis='both', which='major', labelsize=15)
            s.legend(handles=[mpl.patches.Patch(color=c, label=l) for (l,c) in self.legend.items()])

        if self.opts.output:
            plt.savefig(self.opts.output)

        if self.opts.display or not self.opts.output:
            plt.show()

    def plot(self, fig, manager):
        return NotImplemented


class TxnPlotManager(TxnPlot):
    def line(self, fig, cu, xtime, color):
        norm = max(1, len(cu.index))
        fig.plot(cu["one"].cumsum()/norm, cu[xtime], color=color)

    def plot(self, fig, manager):
        ts = manager.tasks
        xs = manager.transfers
        ws = manager.workers

        xs["one"] = 1
        ts["one"] = 1

        xs["end_time"] = xs["start_time"] + xs["wall_time"]
        xs.sort_values("end_time", ignore_index=True, inplace=True)

        cu = xs[xs["direction"] == "CACHE_UPDATE"][["end_time", "one"]]
        self.line(fig, cu, "end_time", color=self.legend["cache updates"])

        cu = xs[xs["direction"] == "INPUT"][["end_time", "one"]]
        self.line(fig, cu, "end_time", color=self.legend["inputs from manager"])

        cu = xs[xs["direction"] == "OUTPUT"][["end_time", "one"]]
        self.line(fig, cu, "end_time", color=self.legend["outputs to manager"])

        fig.set_ylabel("Percentage")
        fig.set_yticks([0, 1])
        fig.set_yticklabels(["0", "100%"])


class TxnPlotTasks(TxnPlot):
    def plot(self, fig, manager):
        manager.tasks.sort_values("time_commit_start", ignore_index=True, inplace=True)

        # divided tasks on whether we have a full report
        at = manager.tasks
        lt = manager.tasks[manager.tasks["reason"] == "DISCONNECTION"]
        dt = manager.tasks[manager.tasks["reason"] != "DISCONNECTION"]

        del self.legend["workers lifetime"] # not show in this plot

        cu = at[at["size_input_mgr"] > 0]
        self.bh(fig, cu.index, cu["time_commit_start"], cu["time_input_mgr"], self.legend["inputs from manager"], edgecolor=None)

        cu = at[at["size_output_mgr"] > 0]
        self.bh(fig, cu.index, cu["RETRIEVED"]-cu["time_output_mgr"], cu["time_output_mgr"], self.legend["outputs to manager"], edgecolor=None)

        self.bh(fig, dt.index, dt["time_commit_end"],  dt["time_worker_start"] - dt["time_commit_end"], self.legend["cache updates"], edgecolor=None)

        del self.legend["tasks waiting for cache"] # already covered above

        self.bh(fig, lt.index, lt["time_commit_end"],  lt["last_state_time"] - lt["time_commit_end"], self.legend["tasks lost on disconnection"], edgecolor=None)

        self.bh(fig, dt.index, dt["time_worker_start"],  dt["time_worker_end"] - dt["time_worker_start"], self.legend["tasks executing"], edgecolor=None)

        self.bh(fig, dt.index, dt["time_worker_end"],  dt["RETRIEVED"] - dt["time_worker_end"], self.legend["tasks waiting retrieval"], edgecolor=None)

        del self.legend["tasks failures"] # already covered above

        fig.set_ylabel("tasks")
        fig.set_yticks([0, len(dt.index)])
        fig.set_yticklabels(["1", str(len(dt.index)+1)])  # ytick number of workers



class TxnPlotWorkers(TxnPlot):
    def plot_by_worker(self, fig, worker, worker_times, worker_xfers, base_slot):
        slot_count = worker["slot"].nunique() + 2  # + 2 for the "slots" for cache update, and transfers
        worker["slot"] += base_slot+1 # slot 0 for cache updates, 1 for transfers

        dt = worker[worker["reason"] != "DISCONNECTION"]
        y = worker["slot"]

        # plot times from this wid
        self.bh(fig, base_slot, worker_times["CONNECTION"], worker_times["DISCONNECTION"] - worker_times["CONNECTION"], "C9", height=slot_count)

        cu = worker_xfers[ worker_xfers["direction"] == "CACHE_UPDATE" ]
        self.bh(fig, base_slot+0.1, cu["start_time"], cu["wall_time"], self.legend["cache updates"], height=0.7)

        # select tasks that needed inputs or outputs, and plot that.  we prefer this
        # information from tasks rather than transfer records, as there is only
        # at most one record per task.
        cu = worker[worker["size_input_mgr"] > 0]
        self.bh(fig, base_slot+1, cu["time_commit_start"], cu["time_input_mgr"], self.legend["inputs from manager"])

        cu = worker[worker["size_output_mgr"] > 0]
        self.bh(fig, base_slot+1, cu["RETRIEVED"]-cu["time_output_mgr"], cu["time_output_mgr"], self.legend["outputs to manager"])

        self.bh(fig, y, worker["RUNNING"], worker["last_state_time"]-worker["RUNNING"], self.legend["tasks waiting for cache"])

        self.bh(fig, dt["slot"], dt["time_worker_start"], dt["time_worker_end"]-dt["time_worker_start"], self.legend["tasks executing"])

        self.bh(fig, worker["slot"], worker["time_worker_end"], worker["RETRIEVED"]-worker["time_worker_end"], self.legend["tasks waiting retrieval"])

        ft = dt[(dt["reason"] != "SUCCESS") | ((dt["reason"] == "SUCCESS") & (dt["exit_code"] != 0))]
        self.bh(fig, ft["slot"], ft["RETRIEVED"] - 0.5, 0.5, self.legend["tasks failures"])

        return worker["slot"].max() + 1


    def plot(self, fig, manager):
        ts = manager.tasks
        xs = manager.transfers
        ws = manager.workers

        gs = ts.groupby("worker_id", sort=False)
        by_min_connects = ws.groupby("worker_id")["CONNECTION"].min().sort_values().index
        gsd = {wid: g  for (wid, g) in gs}

        base_slot=0
        for wid in by_min_connects:
            worker = gsd.get(wid, None)
            worker_times = ws[ws["worker_id"] == wid]
            worker_xfers = xs[xs["worker_id"] == wid]

            if worker is not None:
                base_slot = self.plot_by_worker(fig, worker, worker_times, worker_xfers, base_slot)

        fig.set_ylabel("worker")
        fig.set_yticks((0, base_slot))
        fig.set_yticklabels(["0", str(gs.ngroups)])  # ytick number of workers


if __name__ == "__main__":

    parser = argparse.ArgumentParser(description='Plot TaskVine workflow information from a transaction log file.')

    parser.add_argument('log', help='Path to transaction log file')
    parser.add_argument('output', nargs='?', default=None, help='output name of the plot/csv generated. If not given, assumes --display')
    parser.add_argument('--mode', choices="workers tasks manager csv".split(), default="workers", help='information to plot. sv. If csv, write dataframes for tasks, workers and transfers to disk instead.')
    parser.add_argument('--title', nargs='?', default='TaskVine', help='Title of the plot')
    parser.add_argument('--origin', nargs='?', help='change plot origin. One of manager-start, first-waiting-task, first-transfer, or first-worker', default="first-worker")
    parser.add_argument('--end', nargs='?', help='change plot end time. One of manager-end, last-task', default="last-task")
    parser.add_argument('--tasks-range', nargs='?', help='range of tasks ids to plot as start[,[end][,step]] ', default="1,,1")
    parser.add_argument('--display', action='store_true', help='show plot using matplotlib internal viewer')
    parser.add_argument('--width', nargs='?', type=float, help='width in inches', default=12)
    parser.add_argument('--height', nargs='?', type=float, help='height in inches. Default is 2/3 of width', default=None)
    parser.add_argument('--dpi', nargs='?', type=int, help='output image resoulution', default=300)
    parser.add_argument('--tex', action='store_true', help='use tex fonts')
    args = parser.parse_args()

    p = ParseTxn(args.log, args.tasks_range)

    if args.mode == "csv":
        p.write_tables(args.output)
    elif args.mode == "workers":
        TxnPlotWorkers(p.managers, args)
    elif args.mode == "tasks":
        TxnPlotTasks(p.managers, args)
    elif args.mode == "manager":
        TxnPlotManager(p.managers, args)


